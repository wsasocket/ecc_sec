# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bravosec', [dirname(__file__)])
        except ImportError:
            import _bravosec
            return _bravosec
        if fp is not None:
            try:
                _mod = imp.load_module('_bravosec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bravosec = swig_import_helper()
    del swig_import_helper
else:
    import _bravosec
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def build_csr_hash(token: 'char const *', public_key_x: 'char const *', public_key_y: 'char const *', extend1: 'char const *', extend2: 'char const *', extend3: 'char const *', base64_out: 'char *') -> "int":
    return _bravosec.build_csr_hash(token, public_key_x, public_key_y, extend1, extend2, extend3, base64_out)
build_csr_hash = _bravosec.build_csr_hash

def build_crt_hash(token: 'char const *', public_key_x: 'char const *', public_key_y: 'char const *', SN: 'char const *', expire: 'char const *', extend1: 'char const *', extend2: 'char const *', extend3: 'char const *', base64_out: 'char *') -> "int":
    return _bravosec.build_crt_hash(token, public_key_x, public_key_y, SN, expire, extend1, extend2, extend3, base64_out)
build_crt_hash = _bravosec.build_crt_hash

def verify_csr(hash_value: 'char const *', public_key_x: 'char const *', public_key_y: 'char const *', sign_r: 'char const *', sign_s: 'char const *') -> "int":
    return _bravosec.verify_csr(hash_value, public_key_x, public_key_y, sign_r, sign_s)
verify_csr = _bravosec.verify_csr

def sign_crt(hash_value: 'char const *', sign_r: 'char *', sign_s: 'char *') -> "int":
    return _bravosec.sign_crt(hash_value, sign_r, sign_s)
sign_crt = _bravosec.sign_crt

def verify_crt(hash_value: 'char const *', sign_r: 'char const *', sign_s: 'char const *') -> "int":
    return _bravosec.verify_crt(hash_value, sign_r, sign_s)
verify_crt = _bravosec.verify_crt

def sign_csr(hash_value: 'char const *', sign_r: 'char *', sign_s: 'char *') -> "int":
    return _bravosec.sign_csr(hash_value, sign_r, sign_s)
sign_csr = _bravosec.sign_csr

def seal_digital_envelope(msg: 'char const *', peer_public_x: 'char const *', peer_public_y: 'char const *', cipher_hash: 'char *', sign_r: 'char *', sign_s: 'char *', env: 'char *') -> "int":
    return _bravosec.seal_digital_envelope(msg, peer_public_x, peer_public_y, cipher_hash, sign_r, sign_s, env)
seal_digital_envelope = _bravosec.seal_digital_envelope

def tear_digital_envelope_ex(msg: 'char const *', peer_public_x: 'char const *', peer_public_y: 'char const *', cipher_hash: 'char const *', sign_r: 'char const *', sign_s: 'char const *', msg_out: 'char *') -> "int":
    return _bravosec.tear_digital_envelope_ex(msg, peer_public_x, peer_public_y, cipher_hash, sign_r, sign_s, msg_out)
tear_digital_envelope_ex = _bravosec.tear_digital_envelope_ex
# This file is compatible with both classic and new-style classes.


